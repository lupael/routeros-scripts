#!rsc by RouterOS
# RouterOS script: netwatch-notify
# Copyright (c) 2020-2021 Christian Hesse <mail@eworm.de>
# https://git.eworm.de/cgit/routeros-scripts/about/COPYING.md
#
# monitor netwatch and send notifications
# https://git.eworm.de/cgit/routeros-scripts/about/doc/netwatch-notify.md

:local 0 "netwatch-notify";
:global GlobalFunctionsReady;
:while ($GlobalFunctionsReady != true) do={ :delay 500ms; }

:global NetwatchNotify;

:global DNSIsResolving;
:global IfThenElse;
:global LogPrintExit2;
:global ParseKeyValueStore;
:global ScriptLock;
:global SendNotification2;
:global SymbolForNotification;

:local NetwatchNotifyHook do={
  :local Name [ :tostr $1 ];
  :local Type [ :tostr $2 ];
  :local Hook [ :tostr $3 ];

  :global LogPrintExit2;
  :global ValidateSyntax;

  :if ([ $ValidateSyntax $Hook ] = true) do={
    :do {
      [ :parse $Hook ];
    } on-error={
      $LogPrintExit2 warning $0 ("The " . $Type . "-hook for host " . $Name . " failed to run.") false;
      :return ("The hook failed to run.");
    }
  } else={
    $LogPrintExit2 warning $0 ("The " . $Type . "-hook for host " . $Name . " failed syntax validation.") false;
    :return ("The hook failed syntax validation.");
  }

  $LogPrintExit2 info $0 ("Ran hook on host " . $Name . " " . $Type . ": " . $Hook) false;
  :return ("Ran hook:\n" . $Hook);
}

:if ([ :typeof $NetwatchNotify ] = "nothing") do={
  :set NetwatchNotify [ :toarray "" ];
}

$ScriptLock $0;

:foreach Host in=[ / tool netwatch find where comment~"^notify," disabled=no ] do={
  :local HostVal [ / tool netwatch get $Host ];
  :local HostInfo [ $ParseKeyValueStore ($HostVal->"comment") ];
  :local HostName ($HostInfo->"hostname");

  :local Metric { "count"=0; "notified"=false };
  :if ([ :typeof ($NetwatchNotify->$HostName) ] = "array") do={
    :set $Metric ($NetwatchNotify->$HostName);
  }

  :if ([ :typeof ($HostInfo->"resolve") ] = "str" && [ $DNSIsResolving ] = true) do={
    :do {
      :local Resolve [ :resolve ($HostInfo->"resolve") ];
      :if ($Resolve != $HostVal->"host") do={
         $LogPrintExit2 info $0 ("Name '" . $HostInfo->"resolve" . [ $IfThenElse ($HostInfo->"resolve" != \
           $HostInfo->"hostname") ("' for host '" . $HostInfo->"hostname") "" ] . \
           "' resolves to different address " . $Resolve . ", updating.") false;
        / tool netwatch set host=$Resolve $Host;
        :set ($Metric->"resolve-failed") false;
      }
    } on-error={
      :if ($Metric->"resolve-failed" != true) do={
        $LogPrintExit2 warning $0 ("Resolving name '" . $HostInfo->"resolve" . [ $IfThenElse ($HostInfo->"resolve" != \
          $HostInfo->"hostname") ("' for host '" . $HostInfo->"hostname") "" ] . "' failed.") false;
        :set ($Metric->"resolve-failed") true;
      }
    }
  }

  :if ($HostVal->"status" = "up") do={
    :local Count ($Metric->"count");
    :if ($Count > 0) do={
      $LogPrintExit2 info $0 ("Host " . $HostName . " (" . $HostVal->"host" . ") is up.") false;
      :set ($Metric->"count") 0;
    }
    :if ($Metric->"notified" = true) do={
      :local Message ("Host " . $HostName . " (" . $HostVal->"host" . ") is up since " . $HostVal->"since" . ".\n" . \
        "It was down for " . $Count . " checks since " . ($Metric->"since") . ".");
      :if ([ :typeof ($HostInfo->"up-hook") ] = "str") do={
        :set Message ($Message . "\n\n" . [ $NetwatchNotifyHook $HostName "up" ($HostInfo->"up-hook") ]);
      }
      $SendNotification2 ({ origin=$0; \
        subject=([ $SymbolForNotification "white-heavy-check-mark" ] . "Netwatch Notify: " . $HostName . " up"); \
        message=$Message });
    }
    :set ($Metric->"notified") false;
    :set ($Metric->"parent") ($HostInfo->"parent");
    :set ($Metric->"since");
  } else={
    :set ($Metric->"count") ($Metric->"count" + 1);
    :set ($Metric->"parent") ($HostInfo->"parent");
    :set ($Metric->"since") ($HostVal->"since");
    :local Count [ $IfThenElse ([ :tonum ($HostInfo->"count") ] > 0) ($HostInfo->"count") 5 ];
    :local Parent ($HostInfo->"parent");
    :while ([ :len $Parent ] > 0) do={
      :set Count ($Count + 1);
      :set Parent ($NetwatchNotify->$Parent->"parent");
    }
    :set Parent ($HostInfo->"parent");
    :local ParentNotified false;
    :while ($ParentNotified = false && [ :len $Parent ] > 0) do={
      :set ParentNotified [ $IfThenElse (($NetwatchNotify->$Parent->"notified") = true) true false ];
      :if ($ParentNotified = false) do={
        :set Parent ($NetwatchNotify->$Parent->"parent");
      }
    }
    $LogPrintExit2 info $0 ("Host " . $HostName . " (" . $HostVal->"host" . ") is down for " . \
      $Metric->"count" . " checks, " . [ $IfThenElse ($ParentNotified = false) [ $IfThenElse \
      ($Metric->"notified" = true) ("already notified.") ($Count - $Metric->"count" . " to go.") ] \
      ("parent host " . $Parent . " is down.") ]) false;
    :if ((($Count * 2) - ($Metric->"count" * 3)) / 2 = 0 && [ :typeof ($HostInfo->"pre-down-hook") ] = "str") do={
      $NetwatchNotifyHook $HostName "pre-down" ($HostInfo->"pre-down-hook");
    }
    :if ($ParentNotified = false && $Metric->"count" >= $Count && $Metric->"notified" != true) do={
      :local Message ("Host " . $HostName . " (" . $HostVal->"host" . ") is down since " . $HostVal->"since" . ".");
      :if ([ :typeof ($HostInfo->"down-hook") ] = "str") do={
        :set Message ($Message . "\n\n" . [ $NetwatchNotifyHook $HostName "down" ($HostInfo->"down-hook") ]);
      }
      $SendNotification2 ({ origin=$0; \
        subject=([ $SymbolForNotification "cross-mark" ] . "Netwatch Notify: " . $HostName . " down"); \
        message=$Message });
      :set ($Metric->"notified") true;
    }
  }
  :set ($NetwatchNotify->$HostName) {
    "count"=($Metric->"count");
    "notified"=($Metric->"notified");
    "parent"=($Metric->"parent");
    "resolve-failed"=($Metric->"resolve-failed");
    "since"=($Metric->"since") };
}
